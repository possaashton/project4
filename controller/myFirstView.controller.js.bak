sap.ui.define([
    "sap/ui/core/mvc/Controller",
	"sap/m/MessageToast" 
], (Controller) => {
    "use strict";

    return Controller.extend("project4.controller.myFirstView", {

        onInit() {
			/**For testing**/
			this.byId("ipUserCode").setValue('ashton');
			this.byId("ipUserName").setValue('possa');
			var codebox = this.byId("mcbDBSelector");
				codebox.setSelectedKeys("SBODemoGB");
			var codebox1 = this.byId("mcbAuthorization");
				codebox1.setSelectedKeys(["Finance User","Accounts Payable"]);	
			/**For testing**/
			const oLogModel = new sap.ui.model.json.JSONModel([]);
			this.getView().setModel(oLogModel, "logModel");			
			
			sap.m.MessageToast.show('Welcome to SAP UI5');
        },
		
        _onUpdateUser: async function () {
					
			const bValid = this._frmValidation();
			if (!bValid) return;		
			
			try {
				const sUserName = "manager";
				const sPassword = "B1Admin";
				const aSelectedDBs = this.byId("mcbDBSelector").getSelectedKeys();
						
				for (const dbName of aSelectedDBs) {
					this._addLog("Start of Program for User Code " + this.byId("ipUserCode").getValue());
					const loginPayload = {
						CompanyDB: dbName,
						UserName: sUserName,
						Password: sPassword
					};
		
					// 1. Login & get session for this DB
					const sessionId = await this._login(loginPayload);
					if (!sessionId) {
						this._addLog("Error connecting to " + dbName);
						await this._logout();
						this._addLog("End of Program for User " + this.byId("ipUserCode").getValue() + " in Database " + dbName);
						continue;					
					}
					// 2. Validate user exists in this DB
					const userData = await this._getUser(sessionId, dbName);
					if (!userData){
						this._addLog("User Code " + this.byId("ipUserCode").getValue() + " not found in Database " + dbName);
						await this._logout();
						this._addLog("End of Program for User " + this.byId("ipUserCode").getValue() + " in Database " + dbName);
						continue;
					} 
		
					// 3. Get user Groups from this DB
					let aSAPUserGroups = await this._getUserGroups(dbName);
					
					// 4. Update user in this DB
					await this._updateUser(sessionId, userData, dbName, aSAPUserGroups);
					
					if(this.byId("chkBoyumLicense").getSelected()) {
						await this._assignBoyumLicense(sessionId, userData, dbName);
					}
					
					//sap.m.MessageToast.show(`User updated in ${dbName}`);
										
					
					// Logout from the current DB session
					await this._logout();
					this._addLog("End of Program for User " + this.byId("ipUserCode").getValue() + " in Database " + dbName);
				}
			} catch (err) {
				console.error(err);
				this._addLog("Error connecting to " + dbName + "Error Message: " + err.message);
				sap.m.MessageToast.show("Error: " + err.message);
			}		
			
		},
		
		_onClearLogs : function(){
			this.getView().getModel("logModel").setData([]);
		},
		
		_onResetData: function(){
			this.byId("ipUserCode").setValue("");
			this.byId("ipUserName").setValue("");
			this.byId("mcbDBSelector").setSelectedKeys([]);
			this.byId("mcbAuthorization").setSelectedKeys([]);
			this.byId("chkBoyumLicense").setSelected(false);
			
		},
		
		_frmValidation: function () {
			
            if (this.byId("ipUserCode").getValue() === '' ||
                this.byId("ipUserName").getValue() === '') {
                MessageToast.show("UserCode/UserName cannot be blank");
                return false;
            }

            if (this.byId("mcbDBSelector").getSelectedKeys().length === 0) {
                sap.m.MessageToast.show("Please select at least one Database");
                return false;
            }

            return true;
        },
		
		_getUrlData: function(){
			
			// 1️ Get the base URL from manifest.json
			 const oComponent  = this.getOwnerComponent();
			 const oDataSource = oComponent.getMetadata().getManifestEntry("sap.app").dataSources.mainService;
			 const sBaseUrl    = oDataSource.uri.replace(/\/$/, ""); //remove trailing slash 
			 return[oComponent, oDataSource, sBaseUrl];
			 
		},
		
		_login: async function (payload) {
			
			try {
				

				let aUrlData = this._getUrlData();				
				const oComponent  = aUrlData[0],
					  oDataSource = aUrlData[1],
					  sBaseUrl    = aUrlData[2]; 
			
				// 2️ Call the Service Layer login
				const res = await fetch(`${sBaseUrl}/Login`, {
					method: "POST",
					headers: { "Content-Type": "application/json" },
					body: JSON.stringify(payload),
					credentials: "include"
				});
			
				// 3️ Parse JSON
				const data = await res.json().catch(() => null);
			
				// 4️ Check for errors
				if (!res.ok || !data || data.error) {
					if (sap.m && sap.m.MessageToast) {
						sap.m.MessageToast.show(`Login failed for ${payload.CompanyDB}`);
					} else {
						console.warn(`Login failed for ${payload.CompanyDB}`);
					}
					return null;
				}
			
				// 5️ Return session ID
				return data.SessionId;
			
			} catch (err) {
				console.error("Login error:", err);
				if (sap.m && sap.m.MessageToast) {
					sap.m.MessageToast.show(`Login error for ${payload.CompanyDB}: ${err.message}`);
				}
				return null;
			}
	
        },
		
		_logout: async function (){
			
			try{
				let aUrlData = this._getUrlData();				
				const oComponent  = aUrlData[0],
					  oDataSource = aUrlData[1],
					  sBaseUrl    = aUrlData[2];
					  
				const res = await fetch(`${sBaseUrl}/Logout`);
			}
			catch(err){
				console.error("Login error:", err);
				if (sap.m && sap.m.MessageToast) {
					sap.m.MessageToast.show(`Logout error for ${err.message}`);
				}
				return null;
			}
		},
		
		_getUser: async function (sessionId, dbName) {
			
			const userCode = this.byId("ipUserCode").getValue();
			
			let aUrlData = this._getUrlData();				
				const oComponent  = aUrlData[0],
					  oDataSource = aUrlData[1],
					  sBaseUrl    = aUrlData[2];
			
			const res = await fetch(`${sBaseUrl}/Users?$filter=UserCode eq '${userCode}'`, {
				method: "GET",
				credentials: "include", // allows cookies
				headers: { "Content-Type": "application/json" }
			});
			
			if (!res.ok) {
				sap.m.MessageToast.show(`User lookup failed in ${dbName}`);
				return null;
			}
			
			const data = await res.json();
			if (!data.value || data.value.length === 0) {
				sap.m.MessageToast.show(`User '${userCode}' not found in ${dbName}`);
				return null;
			}
			
			return { ...data.value[0], DbName: dbName }; // return DB name along with user
			
		},
		
		_getUserGroups: async function(dbName){
			
			let aUrlData = this._getUrlData();
				const oComponent  = aUrlData[0],
					  oDataSource = aUrlData[1],
					  sBaseUrl    = aUrlData[2];
					  
			const res = await fetch(`${sBaseUrl}/UserGroups`, {
				method: "GET",
				credentials: "include",
				headers: {"Content-Type": "application/json"}
			});
			
			if (!res.ok){
				sap.m.MessageToast.show(`UserGroup Lookup failed in ${dbName}`);
				return null;
			}
			
			const oData = await res.json();
			if(!oData.value || oData.value.length === 0){
				sap.m.MessageToast.show(`Authorization Groups not found in &{dbName}`);
				return null;
			}
			
			return  oData.value;
			
		},	

		_updateUser: async function (sessionId, userData, dbName, aSAPUserGroups) {
			
			const internalKey = userData.InternalKey;
			const newUserName = this.byId("ipUserName").getValue();
			
			let aUrlData = this._getUrlData();				
			const oComponent  = aUrlData[0],
				  oDataSource = aUrlData[1],
				  sBaseUrl    = aUrlData[2];
			
			const aMcbAuthorization = this.byId("mcbAuthorization").getSelectedKeys();
			 
			const userGroupArray = [
				{ USERId: internalKey, GroupId: 1 },
				{ USERId: internalKey, GroupId: 2 }
			];
			const aAssignedUsergroupArray = [];
			
			for(const aToAssignUserGroup of aMcbAuthorization){
				for(const key of aSAPUserGroups){
					
					
					if(aToAssignUserGroup === 'Finance User'){
						var sUserGroupName = key.UserGroupName;
						if(sUserGroupName.search(/finance/i) >= 0)
						{
							aAssignedUsergroupArray.push({
								USERId: internalKey,
								GroupId: key.UserGroupId 
							});
						}
					}
					else if(aToAssignUserGroup === 'Accounts Payable'){
						var sUserGroupName = key.UserGroupName;
						if(sUserGroupName.search(/payable/i) >= 0)
						{
							aAssignedUsergroupArray.push({
								USERId: internalKey,
								GroupId: key.UserGroupId 
							});
						}
					}
					else if(aToAssignUserGroup === 'Financial Reporting with Period Access'){
						var sUserGroupName = key.UserGroupName;
						if(sUserGroupName.search(/finanacial report/i) >= 0)
						{
							aAssignedUsergroupArray.push({
								USERId: internalKey,
								GroupId: key.UserGroupId 
							});
						}
					}
					else if(aToAssignUserGroup === 'Commercial User'){
						var sUserGroupName = key.UserGroupName;
						if(sUserGroupName.search(/commercial/i) >= 0)
						{
							aAssignedUsergroupArray.push({
								USERId: internalKey,
								GroupId: key.UserGroupId 
							});
						}
					}
					else if(aToAssignUserGroup === 'Procurement User'){
						var sUserGroupName = key.UserGroupName;
						if(sUserGroupName.search(/procurement/i) >= 0)
						{
							aAssignedUsergroupArray.push({
								USERId: internalKey,
								GroupId: key.UserGroupId 
							});
						}
					}
					else if(aToAssignUserGroup === 'Asset Management User'){
						var sUserGroupName = key.UserGroupName;
						if(sUserGroupName.search(/asset/i) >= 0)
						{
							aAssignedUsergroupArray.push({
								USERId: internalKey,
								GroupId: key.UserGroupId 
							});
						}
					}
				}				
			}		
			
			const res = await fetch(`${sBaseUrl}/Users(${internalKey})`, {
				method: "PATCH",
				credentials: "include", // allows cookies
				headers: { "Content-Type": "application/json" },
				body: JSON.stringify({ UserName: newUserName, UserGroupByUser: aAssignedUsergroupArray })
			});
			
			if (!res.ok) {
				this._addLog("Error updating UserCode " + this.byId("ipUserCode").getValue() + " in Database " + dbName);
				throw new Error(`User update failed in DB ${dbName}`);
			}else{
				sap.m.MessageToast.show(`User updated in ${dbName}`);
				this._addLog(" Authorization and UserName updated for UserCode" + this.byId("ipUserCode").getValue() +  "  in Database " + dbName);
			}
		},
		
		_assignBoyumLicense: async function(ipSessionId	, ipUserData, ipDbName){
			
			try {
				const userCode = this.byId("ipUserCode").getValue();
				let sCode = crypto.randomUUID();
		
				// Get base Service Layer URL from manifest
				let [oComponent, oDataSource, sBaseUrl] = this._getUrlData();
		
				// Create payload for Boyum License assignment
				const payload = {
					Code: sCode,      
					Name: sCode,
					U_BOY_ID: "BOY_USABILITY",
					U_BOY_USR: userCode
				};
				
				const resGet = await fetch(`${sBaseUrl}/U_BOY_SBO_LICASSN`, {
					method: "GET",
					credentials: "include",
					headers: { "Content-Type": "application/json" }
				});
				
				if(!resGet.ok){
					const msg = await resGet.text();
					sap.m.MessageBox.error(`Boyum license assignment failed: ${msg}`);
					this._addLog("Boyum License Assignemtn Fetch failed, Error Message: " + msg);
					return;
				}
				
				const oDataBoyLicassn = await resGet.json();
				let bFlag = false;
				for(const key of oDataBoyLicassn.value ){
					
					//console.log(key.oDataBoyLicassn.value);
					if(key.U_BOY_USR === userCode){						
						bFlag = true;
						break;						
					}					
				}
				if (bFlag === true) {
					this._addLog("Boyum license already assigned to user " + userCode + " in Database " + ipDbName );
				} 
				else{	
					const res = await fetch(`${sBaseUrl}/U_BOY_SBO_LICASSN`, {
						method: "POST",
						credentials: "include",
						headers: { "Content-Type": "application/json" },
						body: JSON.stringify(payload)
					});
			
					if (!res.ok) {
						const msg = await res.text();
						sap.m.MessageBox.error(`Boyum license assignment failed: ${msg}`);
						this._addLog("Boyum License Assignemtn failed for " + userCode + " in Databse " + ipDbName + "Error Message: " + msg);
						return;
					}
					this._addLog("Boyum license assigned to" + userCode + "in " + ipDbName);
					sap.m.MessageToast.show(`Boyum license assigned to ${userCode} in ${ipDbName}`);
				}
			} catch (err) {
				console.error(err);
				this._addLog("Error assigning Boyum license, Error Message  " + err.message);
				sap.m.MessageBox.error(`Error assigning Boyum license: ${err.message}`);
			}
					
		},
				
		_addLog: function (message) {
			const oLogModel = this.getView().getModel("logModel");
			const aLogs = oLogModel.getData();
		
			const timestamp = new Date().toLocaleString();
			aLogs.push({
				Timestamp: timestamp,
				Message: message
			});
		
			oLogModel.setData(aLogs);
		}
    });
});